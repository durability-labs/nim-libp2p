name: Performance

on:
  push:
    branches:
      - master
  pull_request:
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  examples:
    timeout-minutes: 10
    strategy:
      fail-fast: false

    defaults:
      run:
        shell: bash

    name: "Performance"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: performance/Dockerfile
          tags: dst-test-node:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run
        run: |
          ./performance/runner.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Aggregate and display summary
        run: |
          python3 ./performance/aggregate_stats.py

      - name: Post/Update PR Performance Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- perf-summary-marker -->';
            const body = fs.readFileSync('/tmp/perf-summary.md', 'utf8');
            // Find existing comment with marker
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existing = comments.find(c => c.body && c.body.startsWith(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
